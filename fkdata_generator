#! /usr/local/bin/python3
import pandas as pd
from faker import Faker
import argparse
import sys
from tqdm import tqdm

# This script generates data in json, csv or parquet format
# mblue Feb 2023

parser = argparse.ArgumentParser()
parser.add_argument('--file', '-f', nargs='*', dest="data_file", help='name for the file -e user_data.parquet')
parser.add_argument('--records','-r', nargs='*', dest="num_records", type=str, help='Enter the amount of records like 100 = 100 rows of data')
parser.add_argument('--format', dest="format_name", type=str, help="Specify the format of the output")
parser.add_argument('--append', '-a', help='Uses 5.7 Grant Syntax', action="store_true")
args = (parser.parse_args())

# arg conditions
if args.data_file:
    FNAME = ''.join(args.data_file)
else:
    # Setting default value
    FNAME = "fake_user_data"

if args.num_records:
    REC = ''.join(args.num_records)
else:
    REC = 100

# limited error handling
# *TODO: Better handling   
if args.format_name is None:
    print("Needs 'csv, json or parquet' format argument:\n\
    Usage is: python3 fkdata_generator --file mytestdata --records 1000 --format parquet")
    sys.exit()

if args.format_name:
    FORMAT = ''.join(args.format_name)
    print("\nGenerating Fake Data with", '\'' + REC +  '\'', 'records.... \n')

# Create an instance of Faker
fake = Faker('en-US')
#CPU_CORES = cpu_count() -1 
# Create a pandas DataFrame

# To create email addresses
first_name = fake.first_name()
last_name = fake.last_name()
REC = int(REC)

# Generate Fake Data
def create_df():
    df = pd.DataFrame()
    for _ in tqdm(range(int(REC)), colour="#18F6F6"):

        first_name = fake.first_name()
        last_name = fake.last_name()
        gamer_id = last_name + str(fake.random_int()) #* String to cagonate pw

        df = pd.concat([df, pd.DataFrame({
            'Email_Id': f"{first_name}.{last_name}@{fake.domain_name()}",
            'Name': first_name,
            'Gamer_Id': gamer_id,
            'Device': fake.ios_platform_token(),
            'Phone_Number' : fake.phone_number(),
            'Address' : fake.address(),
            'City': fake.city(),
            'Year':fake.year(),
            'Time': fake.time(),
            'Link': fake.url(),
            'Purchase_Amount': fake.random_int(min=5, max=1000) 
        }, index=[0])], ignore_index=True)
    return df

df = create_df()

def head_it():
    h1 = df.head(3)
    print("\nSample Data:\n", h1.to_string(index=False),"\n")

#Global message 
def Message1():

    MESSAGE = f"\nCreated file: " + FNAME + "\nWith " + str(REC) + " records of data\n"
    print(MESSAGE)

def Message2():

    MESSAGE = f"\nAppended to file: " + FNAME + "\nWith " + str(REC) + " more records of data\n"
    print(MESSAGE)  


# Write to CSV
if args.format_name == "csv":
    if args.append:
        head_it()
        FNAME = FNAME + ".csv"
        with open(FNAME, 'a') as f:
            df.to_csv(FNAME, mode='a', index=False)
        Message2()
        sys.exit()
    else:
        head_it()
        FNAME = FNAME + ".csv"
        df.to_csv(FNAME, index=False)
        Message1()
        sys.exit()

# Write to Parquet
if args.format_name == "parquet":
    if args.append:
        head_it()
        FNAME = FNAME + ".parquet"
        df.to_parquet(FNAME, engine='fastparquet', append=True)
        Message2()
        sys.exit()
    else:
        FNAME = FNAME + ".parquet"
        df.to_parquet(FNAME)
        head_it()
        Message1()
        sys.exit()

# Write to Json
if args.format_name == "json":
    FNAME = FNAME + ".json"
    df.to_json(FNAME, orient='records')
    head_it()
    Message1()
    sys.exit()
    
else:
    print("Format not supported must be either 'csv, json or parquet' format.")
sys.exit()

